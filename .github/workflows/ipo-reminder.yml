name: Enterprise IPO Reminder (GitHub-Only)

# Workflow triggered: Manual run via code push

on:
  schedule:
    # Run daily at 6:00 AM IST (12:30 AM UTC)
    - cron: '30 0 * * *'
  workflow_dispatch:
    inputs:
      execution_mode:
        description: 'Execution mode'
        required: false
        default: 'normal'
        type: choice
        options:
        - normal
        - test
        - verbose
      custom_message:
        description: 'Custom execution message (optional)'
        required: false
        type: string
  push:
    branches: [ main ]
    paths:
      - 'ipo_reminder/**'
      - '.github/workflows/ipo-reminder.yml'

jobs:
  send-enterprise-ipo-reminders:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ipo_reminder
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Initialize with SQL commands
        volumes:
          - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools curl
        
        # Install Python dependencies
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create logs directory
      run: mkdir -p logs

    - name: Check required secrets
      id: check_secrets
      run: |
        echo "üîí Checking required secrets..."
        missing=0
        if [ -z "${{ secrets.SENDER_EMAIL }}" ]; then
          echo "‚ùå Missing required secret: SENDER_EMAIL"
          missing=1
        fi
        if [ -z "${{ secrets.SENDER_PASSWORD }}" ]; then
          echo "‚ùå Missing required secret: SENDER_PASSWORD"
          missing=1
        fi
        if [ -z "${{ secrets.RECIPIENT_EMAIL }}" ]; then
          echo "‚ùå Missing required secret: RECIPIENT_EMAIL"
          missing=1
        fi
        if [ "$missing" -eq 1 ]; then
          echo "‚ùå One or more required secrets are missing. Please add them in GitHub repository settings under Settings > Secrets and variables > Actions."
          exit 1
        fi
        echo "‚úÖ All required secrets are present"

    - name: Setup database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ipo_reminder
      run: |
        echo "üìä Setting up database..."
        echo "Database URL: $DATABASE_URL"

        # Wait for PostgreSQL to be ready
        echo "‚è≥ Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if PGPASSWORD=postgres pg_isready -h localhost -p 5432 -U postgres -d ipo_reminder; then
            echo "‚úÖ PostgreSQL is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå PostgreSQL is not ready after 30 attempts. Failing..."
            exit 1
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
        
        # Wait for Redis to be ready
        echo "‚è≥ Waiting for Redis to be ready..."
        for i in {1..30}; do
          if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
            echo "‚úÖ Redis is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Redis is not ready after 30 attempts. Failing..."
            exit 1
          fi
          echo "Waiting for Redis... ($i/30)"
          sleep 2
        done

        # Test database connection
        echo "üîç Testing database connection..."
        python -c "
        import os
        from sqlalchemy import create_engine, text
        try:
            engine = create_engine(os.getenv('DATABASE_URL'))
            with engine.connect() as conn:
                result = conn.execute(text('SELECT version();'))
                version = result.fetchone()[0]
                print(f'‚úÖ Connected to PostgreSQL: {version[:50]}...')
        except Exception as e:
            print(f'‚ùå Database connection failed: {e}')
            exit(1)
        "

        # Run database setup
        echo "üèóÔ∏è Running database setup..."
        python setup_database.py setup

    - name: Run Enterprise IPO Reminder
      env:
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ipo_reminder
        REDIS_URL: redis://localhost:6379/0
        BSE_API_KEY: ${{ secrets.BSE_API_KEY }}
        NSE_API_KEY: ${{ secrets.NSE_API_KEY }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY || 'default-encryption-key-32-chars-long' }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY || 'default-jwt-secret-key-32-chars-long' }}
        ENTERPRISE_MODE: true
        MONITORING_ENABLED: true
        AUDIT_ENABLED: true
        LOG_LEVEL: ${{ github.event.inputs.execution_mode == 'verbose' && 'DEBUG' || 'INFO' }}
        EXECUTION_MODE: ${{ github.event.inputs.execution_mode || 'normal' }}
        CUSTOM_MESSAGE: ${{ github.event.inputs.custom_message || '' }}
      run: |
        echo "üöÄ ENTERPRISE IPO REMINDER WORKFLOW"
        echo "==================================="
        echo "‚è∞ Execution time:"
        echo "  UTC: $(date -u '+%Y-%m-%d %H:%M:%S %Z')"
        echo "  IST: $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S %Z')"
        echo ""
        echo "üîß System Configuration:"
        echo "  Enterprise Mode: $ENTERPRISE_MODE"
        echo "  Monitoring: $MONITORING_ENABLED"
        echo "  Audit Logging: $AUDIT_ENABLED"
        echo "  Database: PostgreSQL Ready"
        echo "  Cache: Redis Ready"
        echo ""

        # Verify email configuration
        if [ -z "$SENDER_EMAIL" ] || [ -z "$SENDER_PASSWORD" ] || [ -z "$RECIPIENT_EMAIL" ]; then
          echo "‚ùå Email configuration missing!"
          echo "Please set the following GitHub secrets:"
          echo "  - SENDER_EMAIL: Your Gmail address"
          echo "  - SENDER_PASSWORD: Your Gmail app password"
          echo "  - RECIPIENT_EMAIL: Email address to receive IPO reminders"
          exit 1
        fi

        echo "‚úÖ Email configuration verified"
        echo "üìß Sender: $SENDER_EMAIL"
        echo "üìß Recipient: $RECIPIENT_EMAIL"
        echo ""

        # Test network connectivity to IPO data sources
        echo "üåê Testing network connectivity..."
        if curl -s --max-time 10 https://www.chittorgarh.com > /dev/null; then
            echo "‚úÖ Chittorgarh website accessible"
        else
            echo "‚ö†Ô∏è  Chittorgarh website not accessible (will use fallback)"
        fi

        if curl -s --max-time 10 https://www.moneycontrol.com > /dev/null; then
            echo "‚úÖ Moneycontrol website accessible"
        else
            echo "‚ö†Ô∏è  Moneycontrol website not accessible (will use fallback)"
        fi
        echo ""

        # Run enterprise orchestrator with error handling
        echo "üè¢ Starting Enterprise IPO Orchestrator..."
        cd /home/runner/work/ipo-reminder/ipo-reminder

        # Create logs directory if it doesn't exist
        mkdir -p logs

        # Set Python path
        export PYTHONPATH="/home/runner/work/ipo-reminder/ipo-reminder:$PYTHONPATH"

        # Run with timeout and error handling
        timeout 600 python -m ipo_reminder 2>&1 | tee logs/workflow_output.log

        # Check if the command succeeded
        if [ $? -eq 0 ]; then
            echo "‚úÖ IPO Reminder execution completed successfully!"
        else
            echo "‚ùå IPO Reminder execution failed!"
            echo "üìã Last 20 lines of output:"
            tail -20 logs/workflow_output.log
            exit 1
        fi

        echo ""
        echo "‚úÖ Enterprise IPO Reminder workflow completed!"
        echo "üìß Email sent successfully (if IPOs found)"
        echo "üìä System logs saved to logs/ directory"

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: enterprise-ipo-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30

    - name: Notification on failure
      if: failure()
      run: |
        echo "‚ùå Enterprise IPO Reminder workflow failed!"
        echo "Please check the logs and GitHub Actions output for details."
        echo "Common issues:"
        echo "  - Missing email secrets in GitHub repository"
        echo "  - Database connection issues"
        echo "  - Network connectivity problems with IPO data sources"
