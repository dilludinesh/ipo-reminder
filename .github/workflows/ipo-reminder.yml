name: Enterprise IPO Reminder (GitHub-Only)

# Workflow triggered: Manual run via code push

on:
  schedule:
    # Run daily at 6:00 AM IST (12:30 AM UTC)
    - cron: '30 0 * * *'
  workflow_dispatch:
    inputs:
      execution_mode:
        description: 'Execution mode'
        required: false
        default: 'normal'
        type: choice
        options:
        - normal
        - test
        - verbose
      custom_message:
        description: 'Custom execution message (optional)'
        required: false
        type: string
  push:
    branches: [ main ]
    paths:
      - 'ipo_reminder/**'
      - '.github/workflows/ipo-reminder.yml'

jobs:
  send-enterprise-ipo-reminders:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ipo_reminder
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools curl
        
        # Install Python dependencies
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create logs directory
      run: mkdir -p logs

    - name: Check required secrets
      id: check_secrets
      run: |
        echo "üîí Checking required secrets..."
        missing=0
        if [ -z "${{ secrets.SENDER_EMAIL }}" ]; then
          echo "‚ùå Missing required secret: SENDER_EMAIL"
          missing=1
        fi
        if [ -z "${{ secrets.SENDER_PASSWORD }}" ]; then
          echo "‚ùå Missing required secret: SENDER_PASSWORD"
          missing=1
        fi
        if [ -z "${{ secrets.RECIPIENT_EMAIL }}" ]; then
          echo "‚ùå Missing required secret: RECIPIENT_EMAIL"
          missing=1
        fi
        if [ "$missing" -eq 1 ]; then
          echo "‚ö†Ô∏è  One or more required secrets are missing. Will use .env file values as fallback."
          echo "For production deployments, please add them in GitHub repository settings under Settings > Secrets and variables > Actions."
        else
          echo "‚úÖ All required secrets are present"
        fi

    - name: Setup database
      env:
        POSTGRES_PASSWORD: postgres
        TARGET_DB: ipo_reminder
        DB_USER: ipo_user
        DB_PASSWORD: ipo_password
      run: |
        # Wait for PostgreSQL to be ready
        echo "‚è≥ Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if PGPASSWORD=$POSTGRES_PASSWORD pg_isready -h localhost -p 5432 -U postgres -d postgres; then
            echo "‚úÖ PostgreSQL is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå PostgreSQL is not ready after 30 attempts. Failing..."
            exit 1
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

        # Drop existing connections and clean up
        echo "üîß Cleaning up existing connections and objects..."
        PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U postgres -d postgres -c "
            SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE (pg_stat_activity.datname = '$TARGET_DB' OR pg_stat_activity.usename = '$DB_USER')
            AND pid <> pg_backend_pid();" || true

        # Drop and recreate user and database
        echo "üîÑ Recreating database and user..."
        PGPASSWORD=$POSTGRES_PASSWORD dropdb -h localhost -U postgres --if-exists $TARGET_DB || true
        PGPASSWORD=$POSTGRES_PASSWORD dropuser -h localhost -U postgres --if-exists $DB_USER || true
        
        # Create user with password and database
        PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U postgres -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD' CREATEDB;"
        PGPASSWORD=$POSTGRES_PASSWORD createdb -h localhost -U postgres -O $DB_USER $TARGET_DB
        
        # Set up privileges
        echo "üîë Setting up database privileges..."
        PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U postgres -d $TARGET_DB -c "
            GRANT ALL PRIVILEGES ON DATABASE $TARGET_DB TO $DB_USER;
            GRANT ALL ON SCHEMA public TO $DB_USER;
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $DB_USER;
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $DB_USER;
            GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO $DB_USER;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $DB_USER;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $DB_USER;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO $DB_USER;"

        # Update DATABASE_URL for subsequent steps
        echo "DATABASE_URL=postgresql+psycopg2://$DB_USER:$DB_PASSWORD@localhost:5432/$TARGET_DB" > .env
        echo "TEST_DATABASE_URL=postgresql+psycopg2://$DB_USER:$DB_PASSWORD@localhost:5432/${TARGET_DB}_test" >> .env
        
        # Wait for the new database to be ready
        echo "‚è≥ Waiting for database to be ready..."
        for i in {1..30}; do
          if PGPASSWORD=$DB_PASSWORD psql -h localhost -U $DB_USER -d $TARGET_DB -c "SELECT 1" &>/dev/null; then
            echo "‚úÖ Database is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Database is not ready after 30 attempts. Failing..."
            exit 1
          fi
          echo "Waiting for database... ($i/30)"
          sleep 2
        done

        # Test database connection with explicit URL (using psycopg2 for sync connection test)
        echo "üîç Testing database connection..."
        TEST_DB_URL="postgresql+psycopg2://$DB_USER:$DB_PASSWORD@localhost:5432/$TARGET_DB" python test_db_connection.py

        # Run database setup with async URL
        echo "üèóÔ∏è Running database setup..."
        DATABASE_URL="postgresql+asyncpg://$DB_USER:$DB_PASSWORD@localhost:5432/$TARGET_DB" python setup_database.py setup

    - name: Run Enterprise IPO Reminder
      env:
        DATABASE_URL: postgresql+asyncpg://ipo_user:ipo_password@localhost:5432/ipo_reminder
        REDIS_URL: redis://localhost:6379/0
        BSE_API_KEY: ${{ secrets.BSE_API_KEY || 'test_bse_key_12345' }}
        NSE_API_KEY: ${{ secrets.NSE_API_KEY || 'test_nse_key_12345' }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY || 'test_enc_key_32_chars_long_123456' }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY || 'test_jwt_key_32_chars_long_789012' }}
        ENTERPRISE_MODE: true
        MONITORING_ENABLED: true
        AUDIT_ENABLED: true
        LOG_LEVEL: ${{ github.event.inputs.execution_mode == 'verbose' && 'DEBUG' || 'INFO' }}
        EXECUTION_MODE: ${{ github.event.inputs.execution_mode || 'normal' }}
      run: |
        echo "üöÄ ENTERPRISE IPO REMINDER WORKFLOW"
        echo "==================================="
        echo "‚è∞ Execution time:"
        echo "  UTC: $(date -u '+%Y-%m-%d %H:%M:%S %Z')"
        echo "  IST: $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S %Z')"
        echo ""
        echo "üîß System Configuration:"
        echo "  Enterprise Mode: $ENTERPRISE_MODE"
        echo "  Monitoring: $MONITORING_ENABLED"
        echo "  Audit Logging: $AUDIT_ENABLED"
        echo "  Database: PostgreSQL Ready"
        echo "  Cache: Redis Ready"
        echo ""

        # Verify email configuration
        if [ -z "$SENDER_EMAIL" ] || [ -z "$SENDER_PASSWORD" ] || [ -z "$RECIPIENT_EMAIL" ]; then
          echo "‚ùå Email configuration missing!"
          echo "Please set the following GitHub secrets:"
          echo "  - SENDER_EMAIL: Your Gmail address"
          echo "  - SENDER_PASSWORD: Your Gmail app password"
          echo "  - RECIPIENT_EMAIL: Email address to receive IPO reminders"
          exit 1
        fi

        echo "‚úÖ Email configuration verified"
        echo "üìß Sender: $SENDER_EMAIL"
        echo "üìß Recipient: $RECIPIENT_EMAIL"
        echo ""

        # Test network connectivity to IPO data sources
        echo "üåê Testing network connectivity..."
        if curl -s --max-time 10 https://www.chittorgarh.com > /dev/null; then
            echo "‚úÖ Chittorgarh website accessible"
        else
            echo "‚ö†Ô∏è  Chittorgarh website not accessible (will use fallback)"
        fi

        if curl -s --max-time 10 https://www.moneycontrol.com > /dev/null; then
            echo "‚úÖ Moneycontrol website accessible"
        else
            echo "‚ö†Ô∏è  Moneycontrol website not accessible (will use fallback)"
        fi
        echo ""

        # Run enterprise orchestrator with error handling
        echo "üè¢ Starting Enterprise IPO Orchestrator..."
        cd /home/runner/work/ipo-reminder/ipo-reminder

        # Create logs directory if it doesn't exist
        mkdir -p logs

        # Set Python path
        export PYTHONPATH="/home/runner/work/ipo-reminder/ipo-reminder:$PYTHONPATH"

        # Run with timeout and error handling
        timeout 600 python -m ipo_reminder 2>&1 | tee logs/workflow_output.log

        # Check if the command succeeded
        if [ $? -eq 0 ]; then
            echo "‚úÖ IPO Reminder execution completed successfully!"
        else
            echo "‚ùå IPO Reminder execution failed!"
            echo "üìã Last 20 lines of output:"
            tail -20 logs/workflow_output.log
            exit 1
        fi

        echo ""
        echo "‚úÖ Enterprise IPO Reminder workflow completed!"
        echo "üìß Email sent successfully (if IPOs found)"
        echo "üìä System logs saved to logs/ directory"

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: enterprise-ipo-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30

    - name: Notification on failure
      if: failure()
      run: |
        echo "‚ùå Enterprise IPO Reminder workflow failed!"
        echo "Please check the logs and GitHub Actions output for details."
        echo "Common issues:"
        echo "  - Missing email secrets in GitHub repository"
        echo "  - Database connection issues"
        echo "  - Network connectivity problems with IPO data sources"
